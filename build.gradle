plugins {
  id 'com.github.ben-manes.versions' version '0.42.0'
}

task archiveDeployment(type: Tar) {
  destinationDirectory = file('.')
  archiveFileName = 'deployment.tar'
  into 'deployment'
  from 'deployment'
}

// Add `distributeSql` task to all subprojects with `sql/` child directory
configure(subprojects.findAll { it.projectDir.toPath().resolve('sql').toFile().exists() }) { sp ->
  // Specify only subprojects with `processResources` tasks,
  // otherwise Gradle cannot see `processResources` as a valid task
  ['java', 'com.github.node-gradle.node'].each { pluginId ->
    plugins.withId(pluginId) {

      task distributeSql(type: Copy) {
        into "$rootDir/deployment/postgres-init-db/sql"
        from fileTree(dir: "${sp.projectDir}/sql", include: '**/*.sql')
      }

      task undoDistributeSql(type: Delete) {
        file("${sp.projectDir}/sql").list().each {
          delete "$rootDir/deployment/postgres-init-db/sql/$it"
        }
      }

      // Distribute SQL prior to any resource processing.
      // This ensures `test` and `build` tasks will distribute SQL
      processResources.dependsOn distributeSql

      // Distribute SQL prior to creating deployment archive
      archiveDeployment.dependsOn distributeSql

      // Remove distributed SQL as part of `clean` task
      clean.dependsOn undoDistributeSql
    }
  }
}

subprojects {
  apply plugin: 'com.github.ben-manes.versions'

  repositories {
    // Search the local filesystem before attempting remote repositories.
    flatDir { dirs "$rootDir/third-party" }
    mavenCentral()
  }

  group = 'gov.nasa.jpl.aerie'
  version = '0.10.0-SNAPSHOT'

  tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
    options.encoding = 'UTF-8'
  }

  tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
  }
}
