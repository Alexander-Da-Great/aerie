/**
 * Copyright 2018, by the California Institute of Technology. ALL RIGHTS RESERVED. United States Government Sponsorship acknowledged.
 * Any commercial use must be negotiated with the Office of Technology Transfer at the California Institute of Technology.
 * This software may be subject to U.S. export control laws and regulations.
 * By accepting this document, the user agrees to comply with all applicable U.S. export laws and regulations.
 * User has the responsibility to obtain export licenses, or other export authority as may be required
 * before exporting such information to foreign countries or providing access to foreign persons
 */

import { exec } from 'child_process';
import { writeFileSync } from 'fs';
import { combineLatest, Observable } from 'rxjs';

/**
 * Make a `git` call to get the current branch.
 */
const branch$ = new Observable<string>(observer => {
  exec('git rev-parse --abbrev-ref HEAD', (error: Error | null, stdout: string, stderr: string) => {
    if (error) {
      console.log('git.version.ts - branch$ error - ' + error + stderr);
    }
    observer.next(stdout.toString().trim());
    observer.complete();
  });
});

/**
 * Makes a `git` call to get the current commit.
 */
const commit$ = new Observable<string>(observer => {
  exec('git rev-parse --short HEAD', (error: Error | null, stdout: string, stderr: string) => {
    if (error) {
      console.log('git.version.ts - commit$ error - ' + error + stderr);
    }
    observer.next(stdout.toString().trim());
    observer.complete();
  });
});

function getVersion(branch: string, commit: string): string {
  if (process.env.SEQBASETAG) {
    // use SEQBASETAG environment variable for Jenkins build
    return process.env.SEQBASETAG
  } else {
    // mimic creation of SEQBASETAG env variable for local builds
    const branchVersion = branch.replace(/\//g, '_').replace(/^release_/g, '');
    const d = new Date();
    const year = d.getFullYear();
    const month = ('00' + (d.getMonth() + 1)).slice(-2);
    const day = ('00' + d.getDate()).slice(-2);
    return `${branchVersion}+b0.r${commit}.${year}${month}${day}`;
  }
}

/**
 * Subscribe to the branch$ and commit$ Observables and output a `version` file we can use in the application.
 */
combineLatest(branch$, commit$).subscribe(([branch, commit]) => {
  const version = getVersion(branch, commit);

  console.log(`packageJsonVersion: '${process.env.npm_package_version}', version: '${version}'`);

  const content =
    `// This file is automatically generated by the 'git.version.ts' script.\n` +
    `export const version = { packageJsonVersion: '${process.env.npm_package_version}', version: '${version}' };\n`;

  writeFileSync(
    'src/environments/version.ts',
    content,
    { encoding: 'utf8' },
  );
});
